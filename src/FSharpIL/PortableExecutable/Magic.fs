/// Contains various magic numbers used throughout a PE file.
[<RequireQualifiedAccess>]
module FSharpIL.PortableExecutable.Magic

open System.Collections.Immutable

open FSharpIL.Utilities

/// The MS-DOS header, which contains a pointer to the PE signature (II.25.2.1).
let msDosStub =
    [|
        0x4duy; 0x5auy; 0x90uy; 0x00uy; 0x03uy; 0x00uy; 0x00uy; 0x00uy;
        0x04uy; 0x00uy; 0x00uy; 0x00uy; 0xFFuy; 0xFFuy; 0x00uy; 0x00uy;
        0xb8uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
        0x40uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
        0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
        0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
        0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
        0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x80uy; 0x00uy; 0x00uy; 0x00uy; // lfanew
        0x0euy; 0x1fuy; 0xbauy; 0x0euy; 0x00uy; 0xb4uy; 0x09uy; 0xcduy;
        0x21uy; 0xb8uy; 0x01uy; 0x4cuy; 0xcduy; 0x21uy; 0x54uy; 0x68uy;
        0x69uy; 0x73uy; 0x20uy; 0x70uy; 0x72uy; 0x6fuy; 0x67uy; 0x72uy;
        0x61uy; 0x6duy; 0x20uy; 0x63uy; 0x61uy; 0x6euy; 0x6euy; 0x6fuy;
        0x74uy; 0x20uy; 0x62uy; 0x65uy; 0x20uy; 0x72uy; 0x75uy; 0x6euy;
        0x20uy; 0x69uy; 0x6euy; 0x20uy; 0x44uy; 0x4fuy; 0x53uy; 0x20uy;
        0x6duy; 0x6fuy; 0x64uy; 0x65uy; 0x2euy; 0x0duy; 0x0duy; 0x0auy;
        0x24uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy; 0x00uy;
    |]
    |> Convert.unsafeTo<_, ImmutableArray<byte>>

let dosHeaderSignature = Convert.unsafeTo<_, ImmutableArray<byte>> "MZ"B

/// The PE signature, which immediately precedes the COFF header (II.25.2.1).
let portableExecutableSignature = Convert.unsafeTo<_, ImmutableArray<byte>> "PE\000\000"B

let [<Literal>] CoffHeaderSize = 20u

/// The size of the optional header in a PE32 file when all fields are present, in bytes (II.25.2.2).
let [<Literal>] OptionalHeaderSize = 224us

/// The size of the optional header in a PE32+ file when all fields are present, in bytes.
let [<Literal>] OptionalHeaderPlusSize = 240us

/// The size of a single section header, in bytes.
let [<Literal>] SectionHeaderSize = 40u
